// <auto-generated />
using System;
using InvoiceTestApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InvoiceTestApp.Migrations
{
    [DbContext(typeof(DataContex))]
    [Migration("20201211015818_spGetChargeSumByDateAndCharge")]
    partial class spGetChargeSumByDateAndCharge
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("InvoiceTestApp.Models.Charge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ChargeName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChargeName")
                        .IsUnique()
                        .HasFilter("[ChargeName] IS NOT NULL");

                    b.ToTable("Charges");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ChargeName = "Day"
                        },
                        new
                        {
                            Id = 2,
                            ChargeName = "Night"
                        },
                        new
                        {
                            Id = 3,
                            ChargeName = "Weekend"
                        });
                });

            modelBuilder.Entity("InvoiceTestApp.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ContactPerson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasFilter("[AddressId] IS NOT NULL");

                    b.HasIndex("CompanyName")
                        .IsUnique()
                        .HasFilter("[CompanyName] IS NOT NULL");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyName = "BHTelecom",
                            ContactPerson = "Hamo Hamic",
                            Email = "bhtelecom@outlook.com",
                            IsActive = true,
                            PhoneNumber = "060 555 666"
                        },
                        new
                        {
                            Id = 2,
                            CompanyName = "HT Mostar",
                            ContactPerson = "Anto Antic",
                            Email = "htmostar@outlook.com",
                            IsActive = true,
                            PhoneNumber = "063 555 666"
                        });
                });

            modelBuilder.Entity("InvoiceTestApp.Models.ClientAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientAddresses");
                });

            modelBuilder.Entity("InvoiceTestApp.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("ChargeId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("int");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<double>("Units")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ChargeId")
                        .IsUnique();

                    b.HasIndex("ClientId");

                    b.HasIndex("InvoiceNumber", "ClientId")
                        .IsUnique();

                    b.ToTable("Invoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 555.0,
                            ChargeId = 1,
                            ClientId = 1,
                            EndDate = new DateTime(2020, 11, 26, 2, 58, 17, 324, DateTimeKind.Local).AddTicks(5522),
                            InvoiceDate = new DateTime(2020, 12, 6, 2, 58, 17, 318, DateTimeKind.Local).AddTicks(8775),
                            InvoiceNumber = 123,
                            Rate = 0.20000000000000001,
                            StartDate = new DateTime(2020, 10, 27, 2, 58, 17, 324, DateTimeKind.Local).AddTicks(3981),
                            Tax = 0.17000000000000001,
                            Total = 888.0,
                            Units = 122.0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 899.0,
                            ChargeId = 2,
                            ClientId = 1,
                            EndDate = new DateTime(2020, 11, 26, 2, 58, 17, 325, DateTimeKind.Local).AddTicks(4903),
                            InvoiceDate = new DateTime(2020, 12, 6, 2, 58, 17, 325, DateTimeKind.Local).AddTicks(4818),
                            InvoiceNumber = 225,
                            Rate = 0.29999999999999999,
                            StartDate = new DateTime(2020, 10, 27, 2, 58, 17, 325, DateTimeKind.Local).AddTicks(4877),
                            Tax = 0.17000000000000001,
                            Total = 999.0,
                            Units = 356.0
                        });
                });

            modelBuilder.Entity("InvoiceTestApp.Models.Client", b =>
                {
                    b.HasOne("InvoiceTestApp.Models.ClientAddress", "ClientAddress")
                        .WithOne("Client")
                        .HasForeignKey("InvoiceTestApp.Models.Client", "AddressId");

                    b.Navigation("ClientAddress");
                });

            modelBuilder.Entity("InvoiceTestApp.Models.Invoice", b =>
                {
                    b.HasOne("InvoiceTestApp.Models.Charge", "Charge")
                        .WithOne("Invoice")
                        .HasForeignKey("InvoiceTestApp.Models.Invoice", "ChargeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InvoiceTestApp.Models.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charge");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("InvoiceTestApp.Models.Charge", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("InvoiceTestApp.Models.Client", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("InvoiceTestApp.Models.ClientAddress", b =>
                {
                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
